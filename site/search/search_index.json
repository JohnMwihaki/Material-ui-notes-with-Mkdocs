{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Material UI(MUI)","text":""},{"location":"#what-is-material-ui","title":"What is Material UI?","text":"<p>Material UI (MUI) is a React component library that helps developers build beautiful, consistent, and responsive user interfaces quickly using pre-built components.</p> <p>What is a Component Library?</p> <p>A component library is like a toolbox full of ready-made UI elements (called components) that you can use in your React application instead of building everything from scratch.</p> <p>Simple Analogy</p> <p>Imagine building a house:</p> <p>Without tools = you make every brick yourself.</p> <p>With tools (like MUI) = you have bricks, doors, windows, paint ready to use.</p>"},{"location":"#what-is-material-design","title":"What is Material Design","text":"<p>Definition: Material Design is a design language created by Google.  Material Design is a set of guidelines that define how elements should look, feel, and interact across all devices and platforms. It gives rules and guidelines on:</p> <ul> <li> <p>How things should look (e.g., rounded buttons, shadows)</p> </li> <li> <p>How they should behave (e.g., animations, spacing)</p> </li> <li> <p>How they should respond on different screen sizes (responsiveness)</p> </li> </ul> <p>MUI is built based on the material Design stardard</p>"},{"location":"#core-principles-of-material-design","title":"Core Principles of Material Design","text":"<p>Elevation</p> <ul> <li>Elevation is the idea of giving UI elements depth by using shadows.Buttons \"float\" above the surface.Cards have a shadow to stand out from the background</li> </ul> <p>Every component has a elevation prop (e.g., )</p> <p>Spacing (Consistent Padding &amp; Margin)</p> <ul> <li>Spacing means the distance between elements (padding, margins, gaps).</li> </ul> <p>Typography</p> <p>Typography is the way text looks \u2014 font size, weight, spacing.</p> <p>Material Design defines a typography scale:</p> <ul> <li> <p>h1 to h6 (headings)</p> </li> <li> <p>body1, body2 (paragraphs)</p> </li> <li> <p>caption, subtitle1</p> </li> </ul> <p>You use the <code>&lt;Typography&gt;</code> component with a <code>variant</code> prop.</p> <p>Motion (Animarion and Feedback)</p> <p>Motion is how UI elements move, animate, or respond to interactions.</p> <p>Material Design says motion should:</p> <ul> <li> <p>Show cause and effect</p> </li> <li> <p>Be smooth and intentional</p> </li> <li> <p>Help users understand what changed</p> </li> </ul> <p>Components like <code>&lt;Collapse&gt;</code>, <code>&lt;Slide&gt;</code>, <code>&lt;Fade&gt;</code>, and <code>&lt;Grow&gt;</code> handle</p> <p>Color and Theme</p>"},{"location":"#installing-and-setting-up-mui-in-a-react-app","title":"Installing and Setting Up MUI in a React App","text":"<p>create a react App</p> <pre><code>npx create-react-app my-mui-app\ncd my-mui-app\n</code></pre> <p>Install MUI and Emotion Packages:</p> <pre><code>npm install @mui/material @emotion/react @emotion/styled\n</code></pre> <p>Installing Icons</p> <pre><code>npm install @mui/icons-material\n</code></pre>"},{"location":"#typography","title":"Typography","text":"<p>used for styling text things like : - Font size</p> <ul> <li> <p>Font family</p> </li> <li> <p>Font weight (boldness)</p> </li> <li> <p>Line height</p> </li> <li> <p>Letter spacing</p> </li> <li> <p>Alignment</p> </li> </ul>"},{"location":"#typography-prop","title":"Typography prop","text":"<p>Variant  exmples h1,h2,body1.body2,caption,overline,button</p> <ul> <li>components</li> </ul> <p>inplace of varinat you use it like a teller i have h3 , on variant but hi component</p> <ul> <li> <p>gutterBottom -used to add space below act like </p> </li> <li> <p>align </p> </li> <li> <p>color</p> </li> <li> <p>sx -style extension -for styling</p> </li> </ul> <p>Example Default Typography:</p> Variant Font Size Font Weight h1 96px 300 h2 60px 300 h3 48px 400 h4 34px 400 h5 24px 400 h6 20px 500 body1 16px 400 body2 14px 400"},{"location":"#button-and-icons","title":"Button and icons","text":""},{"location":"#button-contain-this-variants","title":"button -contain this variants","text":"<ul> <li>text,contained,outline</li> </ul>"},{"location":"#color-prop","title":"color prop","text":"<p>contain the following styling color</p> <ul> <li>primary,secondary,error,warning,info,success</li> </ul>"},{"location":"#size-prop","title":"size prop","text":"<ul> <li>small,medium large i.e sm,md,l,</li> </ul> <p>NOTE sx used for inner responsive styling </p>"},{"location":"#icons-in-mui","title":"Icons in MUI","text":"<pre><code>npm install @mui/icons-material\n</code></pre> <p>we have front and end icons</p> Icon Position Prop Before text <code>startIcon={&lt;Icon /&gt;}</code> After text <code>endIcon={&lt;Icon /&gt;}</code>"},{"location":"#card-and-containers","title":"Card and Containers","text":"<p>Card- is a rectangular container used to group related information like profile ,article,product or messege</p> <p>a title,a short paragraph ,an image or icon ,a button or action </p> <p>Components in card</p> Component Purpose <code>Card</code> The outer container <code>CardContent</code> Holds the text <code>CardMedia</code> Adds an image or video <code>CardActions</code> Holds buttons <code>Typography</code> Used for title, subtitle, and body"},{"location":"#what-cardmedia-props-mean","title":"What CardMedia props mean:","text":"Prop Purpose <code>component=\"img\"</code> Tell MUI it's an image element <code>height=\"140\"</code> Height in px <code>image=\"...\"</code> URL of image <code>alt=\"...\"</code> Alt text (accessibility)"},{"location":"#container","title":"Container","text":"<p>A Container is a layout component that centers and adds horizontal padding to your content.It\u2019s commonly used to wrap the main body of your page.</p> <pre><code>&lt;Container maxWidth=\"md\" sx={{ py: 4 }}&gt;\n  &lt;Grid container spacing={3}&gt;\n    &lt;Grid item xs={12} sm={6} md={4}&gt;\n      &lt;FullCard /&gt;\n    &lt;/Grid&gt;\n    &lt;Grid item xs={12} sm={6} md={4}&gt;\n      &lt;FullCard /&gt;\n    &lt;/Grid&gt;\n  &lt;/Grid&gt;\n&lt;/Container&gt;\n</code></pre> <p>maxwidth it have this values </p> Value Meaning <code>xs</code> extra-small (up to 600px) <code>sm</code> small (up to 900px) <code>md</code> medium (up to 1200px) (default) <code>lg</code> large (up to 1536px) <code>xl</code> extra-large (max width unlimited)"},{"location":"#grid-and-container","title":"Grid and Container","text":"<p>The Grid system is a flexible layout system based on a 12-column design.</p> <p>You divide space like this:</p> <ul> <li> <p>xs={12} \u2192 full width</p> </li> <li> <p>xs={6} \u2192 half</p> </li> <li> <p>xs={4} \u2192 1/3</p> </li> <li> <p>xs={3} \u2192 1/4</p> </li> </ul> Component Purpose <code>&lt;Grid container&gt;</code> The outer wrapper \u2013 it holds rows <code>&lt;Grid item&gt;</code> The columns or cells inside the row <p>exmple </p> <pre><code>import { Grid, Paper } from '@mui/material';\n\nfunction TwoColumns() {\n  return (\n    &lt;Grid container spacing={2}&gt;\n      &lt;Grid item xs={6}&gt;\n        &lt;Paper sx={{ p: 2 }}&gt;Left Side&lt;/Paper&gt;\n      &lt;/Grid&gt;\n      &lt;Grid item xs={6}&gt;\n        &lt;Paper sx={{ p: 2 }}&gt;Right Side&lt;/Paper&gt;\n      &lt;/Grid&gt;\n    &lt;/Grid&gt;\n  );\n}\n</code></pre> <p>Breakdown: container means this is a grid row</p> <p>item means this is a column</p> <p>xs={6} means 6 out of 12 columns \u2192 half width</p> <p>spacing={2} adds space between columns</p> <p>exmple 2</p> <pre><code>import { Container, Grid, Paper, Typography } from '@mui/material';\n\nfunction GridLayoutExample() {\n  return (\n    &lt;Container maxWidth=\"md\" sx={{ mt: 4 }}&gt;\n      &lt;Typography variant=\"h4\" gutterBottom&gt;\n        My Grid Layout\n      &lt;/Typography&gt;\n\n      &lt;Grid container spacing={3}&gt;\n        &lt;Grid item xs={12} sm={6} md={4}&gt;\n          &lt;Paper sx={{ p: 2 }}&gt;Item 1&lt;/Paper&gt;\n        &lt;/Grid&gt;\n        &lt;Grid item xs={12} sm={6} md={4}&gt;\n          &lt;Paper sx={{ p: 2 }}&gt;Item 2&lt;/Paper&gt;\n        &lt;/Grid&gt;\n        &lt;Grid item xs={12} sm={6} md={4}&gt;\n          &lt;Paper sx={{ p: 2 }}&gt;Item 3&lt;/Paper&gt;\n        &lt;/Grid&gt;\n      &lt;/Grid&gt;\n    &lt;/Container&gt;\n  );\n}\n</code></pre> <p>You can also combine grid with cards and it work perfectly fine </p> <p>spacing add space</p> <pre><code>&lt;Grid container spacing={3}&gt;\n  {Array.from(Array(6)).map((_, index) =&gt; (\n    &lt;Grid item xs={12} sm={6} md={4} key={index}&gt;\n      &lt;Card&gt;\n        &lt;CardContent&gt;\n          &lt;Typography variant=\"h6\"&gt;Card #{index + 1}&lt;/Typography&gt;\n          &lt;Typography variant=\"body2\"&gt;This is some content.&lt;/Typography&gt;\n        &lt;/CardContent&gt;\n      &lt;/Card&gt;\n    &lt;/Grid&gt;\n  ))}\n&lt;/Grid&gt;\n</code></pre>"},{"location":"#mui-grid-system","title":"MUI GRID SYSTEM","text":"<p>The Material UI Grid system is a responsive layout system based on 12 columns, using Flexbox under the hood.Adjust layout per screen size (xs, sm, md, lg),</p> <p>KEY APRTS OF Grid in MUI</p> Component Role <code>&lt;Grid container&gt;</code> Defines a row of items <code>&lt;Grid item&gt;</code> Defines a column inside the row <p>N/B Remember to be using arrays.from or map to render cards in grid system just for easy readerbilty</p>"},{"location":"#stack-in-mui-and-spacing","title":"Stack in Mui and Spacing","text":"<p>A Stack in Material UI is a layout component that helps you place things in a row or column, and adds spacing between them automatically.</p> <p>It\u2019s like saying:</p> <p>\u201cPut these buttons one below the other \u2014 and give me 20px between them \u2014 and don\u2019t make me write CSS for it.\u201d</p> <pre><code>import Stack from '@mui/material/Stack';\n</code></pre> <p>So by default, a Stack places elements vertically, with a configurable space between them.</p>"},{"location":"#spacing-in-stack","title":"Spacing in stack","text":"<p>spacing is a prop you use to set the space between child components inside a Stack.</p> <p>*How It Works:</p> <p>The unit is based on the theme spacing. </p> <p>In Material UI, 1 spacing unit = 8px.*</p> Value Pixels <code>1</code> 8px <code>2</code> 16px <code>3</code> 24px <code>4</code> 32px <p>What the sx properties mean</p> Prop Meaning <code>p</code> Padding (inside the element) <code>m</code> Margin (outside the element) <code>px</code> Padding left + right <code>py</code> Padding top + bottom <code>mt</code> Margin top <code>mb</code> Margin bottom <code>bgcolor</code> Background color (from theme) <code>color</code> Text color (from theme)"},{"location":"#paper-and-surface-components-in-material-ui","title":"Paper and Surface Components in Material UI","text":"<p>Paper is a surface component that gives a white (or themed) background with elevation (shadow) \u2014 like a sheet of paper.</p> <p>It\u2019s often used as a container that:</p> <ul> <li> <p>Holds cards</p> </li> <li> <p>Wraps forms</p> </li> <li> <p>Creates panels or dialogs</p> </li> <li> <p>Visually separates content from the background</p> </li> </ul> <p>why use paper</p> Problem Without Paper Solved With Paper Content looks flat Paper adds visual depth No padding or border Paper provides clean area Background may blend Paper separates background <p>think of Paper as the foundation for all UI blocks \u2014 cards, alerts, forms, dialogs,</p> <p>Elevation controls how much shadow depth the paper has. It makes the Paper look like it\u2019s floating above the background.</p> Value Visual Effect <code>0</code> No shadow (flat) <code>1</code> Small soft shadow <code>3</code> Moderate shadow (default look) <code>10</code>, <code>24</code> Very high/floating look <p>N/B  Maximum is 24 \u2014 use higher values for modal or dialog boxes.</p> <p>Combinning paper with Grid or stack</p> <pre><code>&lt;Stack spacing={3}&gt;\n  &lt;Paper elevation={1} sx={{ p: 2 }}&gt;\n    &lt;Typography variant=\"h6\"&gt;Login Form&lt;/Typography&gt;\n    &lt;TextField label=\"Email\" fullWidth /&gt;\n    &lt;TextField label=\"Password\" type=\"password\" fullWidth /&gt;\n    &lt;Button variant=\"contained\"&gt;Login&lt;/Button&gt;\n  &lt;/Paper&gt;\n\n  &lt;Paper elevation={4} sx={{ p: 2, bgcolor: 'warning.light' }}&gt;\n    Warning Area\n  &lt;/Paper&gt;\n&lt;/Stack&gt;\n</code></pre>"},{"location":"#when-to-use-paper","title":"when to use paper","text":"Use Case Why Use Paper? Cards Add background and shadow for floating effect Forms Give user input areas a clear container Alerts or messages Make them stand out from page background Dialog/Modal content Create raised content above everything else Content sectioning Break page into sections visually"},{"location":"#forms-and-inputs-textfield-and-input-variants","title":"Forms and Inputs TextField and Input Variants","text":"<p>What Is a TextField?</p> <p>TextField is the main form input component in MUI used for typing text, emails, passwords, numbers, etc.an input field,a label,validation/error styling,and helper text \u2014 all in one.</p> <p>Textfield props</p> Prop What It Does <code>label</code> Adds a floating label inside the field <code>variant</code> Controls style: <code>outlined</code>, <code>filled</code>, or <code>standard</code> <code>type</code> Defines input type: <code>text</code>, <code>email</code>, <code>password</code>, <code>number</code>, etc. <code>fullWidth</code> Makes the field stretch to 100% width of its container <code>value</code> Current value (for controlled input) <code>onChange</code> Function that handles typing changes <code>error</code> Boolean: makes field red when true <code>helperText</code> Extra message under the input (e.g., \u201cMust be at least 6 characters\u201d) <p>controlled state inputs</p> <pre><code>import { useState } from 'react';\nimport { TextField } from '@mui/material';\n\nfunction MyForm() {\n  const [name, setName] = useState('');\n\n  return (\n    &lt;TextField\n      label=\"Your Name\"\n      variant=\"outlined\"\n      value={name}\n      onChange={(e) =&gt; setName(e.target.value)}\n    /&gt;\n  );\n}\n</code></pre> <p>how different input types-for password,numers,email used</p> <pre><code>&lt;TextField label=\"Password\" type=\"password\" /&gt;\n&lt;TextField label=\"Email\" type=\"email\" /&gt;\n&lt;TextField label=\"Age\" type=\"number\" /&gt;\n</code></pre> <p>showing errors and helper text</p> <pre><code>&lt;TextField\n  label=\"Email\"\n  type=\"email\"\n  error={true}\n  helperText=\"This email is not valid.\"\n/&gt;\n</code></pre> <p>textarea eqivalent is multiline </p>"},{"location":"#select-autocomplete-and-radio-buttons","title":"Select, Autocomplete, and Radio Buttons","text":"<p>Select is a dropdown input that lets the user pick one option from a list.</p> <p>exmple</p> <pre><code>import { Select, MenuItem, FormControl, InputLabel } from '@mui/material';\nimport { useState } from 'react';\n\nfunction GenderSelect() {\n  const [gender, setGender] = useState('');\n\n  return (\n    &lt;FormControl fullWidth&gt;\n      &lt;InputLabel id=\"gender-label\"&gt;Gender&lt;/InputLabel&gt;\n      &lt;Select\n        labelId=\"gender-label\"\n        id=\"gender\"\n        value={gender}\n        onChange={(e) =&gt; setGender(e.target.value)}\n        label=\"Gender\"\n      &gt;\n        &lt;MenuItem value=\"male\"&gt;Male&lt;/MenuItem&gt;\n        &lt;MenuItem value=\"female\"&gt;Female&lt;/MenuItem&gt;\n        &lt;MenuItem value=\"other\"&gt;Other&lt;/MenuItem&gt;\n      &lt;/Select&gt;\n    &lt;/FormControl&gt;\n  );\n}\n</code></pre> <p>Component Breakdown</p> Component Purpose <code>FormControl</code> Wraps the field for layout and labeling <code>InputLabel</code> Floating label linked by <code>labelId</code> <code>Select</code> Dropdown menu control <code>MenuItem</code> Each choice inside the select <p>Autocomplete</p> <p>Autocomplete is a more powerful select \u2014 it allows searching, typing, suggestions, and even free input if allowed.</p> <pre><code>import { Autocomplete, TextField } from '@mui/material';\n\nconst countries = ['Kenya', 'Tanzania', 'Uganda', 'Ethiopia'];\n\n&lt;Autocomplete\n  options={countries}\n  renderInput={(params) =&gt; (\n    &lt;TextField {...params} label=\"Country\" variant=\"outlined\" /&gt;\n  )}\n/&gt;\n</code></pre> <p>Explanation:</p> Prop Meaning <code>options</code> List of available choices <code>renderInput</code> What the field looks like (uses <code>TextField</code>) <code>{...params}</code> Autocomplete passes props to your field <code>label=\"...\"</code> Label for the input field <p>Radio buttons</p> <p>Radio lets users pick only one option from a group. Like a Select, but visible on screen.</p> <pre><code>import {\n  Radio,\n  RadioGroup,\n  FormControl,\n  FormControlLabel,\n  FormLabel\n} from '@mui/material';\n\n&lt;FormControl&gt;\n  &lt;FormLabel id=\"job-type\"&gt;Job Type&lt;/FormLabel&gt;\n  &lt;RadioGroup\n    aria-labelledby=\"job-type\"\n    value={job}\n    onChange={(e) =&gt; setJob(e.target.value)}\n    name=\"job\"\n    row\n  &gt;\n    &lt;FormControlLabel value=\"full\" control={&lt;Radio /&gt;} label=\"Full-Time\" /&gt;\n    &lt;FormControlLabel value=\"part\" control={&lt;Radio /&gt;} label=\"Part-Time\" /&gt;\n    &lt;FormControlLabel value=\"freelance\" control={&lt;Radio /&gt;} label=\"Freelance\" /&gt;\n  &lt;/RadioGroup&gt;\n&lt;/FormControl&gt;\n</code></pre> <p>Explanation</p> Component Purpose <code>FormControl</code> Groups label + radio group together <code>FormLabel</code> Title for the radio group <code>RadioGroup</code> Manages the selected value <code>FormControlLabel</code> Wraps each Radio with a label <code>Radio</code> The circular selectable input <code>row</code> Layout: makes radios appear side by side <p>important imports</p> <pre><code>import Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormLabel from '@mui/material/FormLabel';\n</code></pre>"},{"location":"#checkboxswitch-and-skiders","title":"Checkbox,Switch and Skiders","text":"<p>A checkbox lets users choose yes/no, true/false, or select multiple options.</p> <pre><code>import Checkbox from '@mui/material/Checkbox';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\n</code></pre> <p>A Switch is like a checkbox, but styled like a mobile on/off toggle.</p> <ul> <li> <p>Used for settings like:</p> </li> <li> <p>Dark mode \ud83c\udf19 / Light mode \u2600\ufe0f</p> </li> <li> <p>Notifications: On / Off</p> </li> <li> <p>Enable / Disable account</p> </li> </ul> <pre><code>const [darkMode, setDarkMode] = useState(false);\n\n&lt;FormControlLabel\n  control={\n    &lt;Switch\n      checked={darkMode}\n      onChange={(e) =&gt; setDarkMode(e.target.checked)}\n    /&gt;\n  }\n  label=\"Enable Dark Mode\"\n/&gt;\n</code></pre> <p>A slider lets the user select a number or range of values by sliding a thumb left and right.e.g voumen control,price filter range and ratings or weights.</p> <pre><code>const [volume, setVolume] = useState(30);\n\n&lt;Slider\n  value={volume}\n  onChange={(e, newValue) =&gt; setVolume(newValue)}\n  aria-label=\"Volume\"\n  valueLabelDisplay=\"auto\"\n  min={0}\n  max={100}\n/&gt;\n</code></pre> <pre><code>&lt;Divider sx={{ my: 2 }} /&gt;\n\n</code></pre> <p>for creating a horizontal line</p> <p>n/b control is used when working with formcontrollabel but you can use the components such as chechbox,radio button e.t.c alone</p>"},{"location":"#formcontrol-and-formgroup","title":"FormControl and FormGroup.","text":"<p>FormControl is a wrapper component that groups together form inputs and their labels, making sure they are styled, aligned, and accessible correctly in Material UI.</p> <p>Why Use FormControl?</p> <p>Connects inputs and labels correctly for screen readers (accessibility)</p> <p>Helps handle error state, helper text, disabled state</p> <p>Ensures consistent spacing and alignment</p> <p>Works behind the scenes to coordinate MUI form behaviors</p> <p>props in formcontrol</p> Prop Meaning <code>fullWidth</code> Makes the input stretch to fill 100% of its parent <code>disabled</code> Disables all child inputs automatically <code>error</code> Shows error styling (red underline, red label) <code>required</code> Adds an asterisk (*) to label to show it\u2019s required <code>variant</code> Sets the style (standard, outlined, filled \u2014 passed to children) <p>exmple </p> <pre><code>import {\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n} from '@mui/material';\n\n&lt;FormControl fullWidth&gt;\n  &lt;InputLabel id=\"language-label\"&gt;Language&lt;/InputLabel&gt;\n  &lt;Select labelId=\"language-label\" defaultValue=\"\"&gt;\n    &lt;MenuItem value=\"en\"&gt;English&lt;/MenuItem&gt;\n    &lt;MenuItem value=\"fr\"&gt;French&lt;/MenuItem&gt;\n    &lt;MenuItem value=\"sw\"&gt;Swahili&lt;/MenuItem&gt;\n  &lt;/Select&gt;\n&lt;/FormControl&gt;\n</code></pre> <p>FormGroup is a container that holds a group of related inputs, like checkboxes or switches, and lays them out vertically or horizontally.</p> <p>It is useful when:</p> <ul> <li> <p>You have multiple checkboxes or switches</p> </li> <li> <p>You want to organize them cleanly</p> </li> <li> <p>You want to group them under one label or heading</p> </li> </ul> <p>Example:for uncontrolled states</p> <pre><code>import {\n  FormGroup,\n  FormControlLabel,\n  Checkbox,\n  Typography,\n} from '@mui/material';\n\n&lt;FormGroup&gt;\n  &lt;Typography variant=\"subtitle1\"&gt;Choose Interests&lt;/Typography&gt;\n  &lt;FormControlLabel control={&lt;Checkbox defaultChecked /&gt;} label=\"Music\" /&gt;\n  &lt;FormControlLabel control={&lt;Checkbox /&gt;} label=\"Movies\" /&gt;\n  &lt;FormControlLabel control={&lt;Checkbox /&gt;} label=\"Coding\" /&gt;\n&lt;/FormGroup&gt;\n</code></pre> <p>Explanation</p> Component Purpose <code>FormGroup</code> Arranges the checkboxes together <code>FormControlLabel</code> Binds label and input together <code>Checkbox</code> The actual input (uncontrolled here) <p>props for formgroup</p> Prop What It Does <code>row</code> If true, aligns all items horizontally instead of vertically <p>Difference between FormControls and FormGroup</p> Feature <code>FormControl</code> <code>FormGroup</code> Purpose Wraps a single field with logic Wraps a set of similar inputs Use Case <code>Select</code>, <code>TextField</code>, <code>RadioGroup</code> <code>Checkbox</code>, <code>Switch</code> collections Layout feature No layout styling Has layout (<code>row</code>, spacing, etc.) Props like <code>error</code>, <code>required</code> \u2705 Yes \u274c No (handled per checkbox) <p>Exmple with controlled state</p> <pre><code>const [skills, setSkills] = useState({\n  html: false,\n  css: true,\n  js: false,\n});\n\nconst handleSkillChange = (e) =&gt; {\n  const { name, checked } = e.target;\n  setSkills((prev) =&gt; ({\n    ...prev,\n    [name]: checked,\n  }));\n};\n\n&lt;FormControl component=\"fieldset\"&gt;\n  &lt;Typography variant=\"h6\"&gt;Your Skills&lt;/Typography&gt;\n  &lt;FormGroup row&gt;\n    &lt;FormControlLabel\n      control={\n        &lt;Checkbox\n          name=\"html\"\n          checked={skills.html}\n          onChange={handleSkillChange}\n        /&gt;\n      }\n      label=\"HTML\"\n    /&gt;\n    &lt;FormControlLabel\n      control={\n        &lt;Checkbox\n          name=\"css\"\n          checked={skills.css}\n          onChange={handleSkillChange}\n        /&gt;\n      }\n      label=\"CSS\"\n    /&gt;\n    &lt;FormControlLabel\n      control={\n        &lt;Checkbox\n          name=\"js\"\n          checked={skills.js}\n          onChange={handleSkillChange}\n        /&gt;\n      }\n      label=\"JavaScript\"\n    /&gt;\n  &lt;/FormGroup&gt;\n&lt;/FormControl&gt;\n</code></pre> <p>Explannation</p> Element Role <code>FormControl</code> Wraps label + group of checkboxes <code>FormGroup</code> Arranges inputs (row or column) <code>FormControlLabel</code> Ties <code>Checkbox</code> to a label <code>Checkbox</code> The actual input (controlled via state) <code>name=\"js\"</code> Used in <code>handleSkillChange</code> to know which key to update <code>onChange={...}</code> Updates the object state (<code>html</code>, <code>css</code>, <code>js</code>)"},{"location":"#handling-form-state-with-formik-or-react-hook-form","title":"Handling Form State (with Formik or React Hook Form)","text":"<p>what is Formik?</p> <p>Formik is a small library that helps you build forms in React easily, by handling:i.e Formik is a tool that helps you build and manage forms in React without writing too much code.</p> <ul> <li> <p>State (like useState does)</p> </li> <li> <p>Validation</p> </li> <li> <p>Submission</p> </li> <li> <p>Error handling</p> </li> <li> <p>Touch tracking (was this field edited?)</p> </li> </ul> <p>Why Was Formik Created?</p> <p>In regular React:</p> <ul> <li> <p>You manage every form input with useState</p> </li> <li> <p>You write custom onChange, onBlur, onSubmit</p> </li> <li> <p>You write your own validation logic</p> </li> </ul> <p>That works... but for big forms, it becomes:</p> <p>\u274c Messy \u274c Hard to validate \u274c Lots of duplicate code \u274c Tedious for multiple inputs</p> <p>\ud83d\udce6 Formik was created to make form logic easy and automatic.</p> <p>Installation:</p> <pre><code>npm install formik\n</code></pre> <p>If you want to use validation, also install:</p> <pre><code>npm install yup\n</code></pre> <p>yup is a validation library (like grammar rules for form data). Formik doesn\u2019t validate by itself \u2014 it lets you use libraries like Yup for that.</p> <p>formik</p> <p>Example</p> <pre><code>import React from 'react';\nimport { Formik } from 'formik';\n\nconst Basic = () =&gt; (\n  &lt;div&gt;\n    &lt;h1&gt;Anywhere in your app!&lt;/h1&gt;\n    &lt;Formik\n      initialValues={{ email: '', password: '' }}\n      validate={values =&gt; {\n        const errors = {};\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        }\n        return errors;\n      }}\n      onSubmit={(values, { setSubmitting }) =&gt; {\n        setTimeout(() =&gt; {\n          alert(JSON.stringify(values, null, 2));\n          setSubmitting(false);\n        }, 400);\n      }}\n    &gt;\n      {({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n        /* and other goodies */\n      }) =&gt; (\n        &lt;form onSubmit={handleSubmit}&gt;\n          &lt;input\n            type=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n          /&gt;\n          {errors.email &amp;&amp; touched.email &amp;&amp; errors.email}\n          &lt;input\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.password}\n          /&gt;\n          {errors.password &amp;&amp; touched.password &amp;&amp; errors.password}\n          &lt;button type=\"submit\" disabled={isSubmitting}&gt;\n            Submit\n          &lt;/button&gt;\n        &lt;/form&gt;\n      )}\n    &lt;/Formik&gt;\n  &lt;/div&gt;\n);\n\nexport default Basic;\n</code></pre> <p>Reducing boilerplate</p> <p>The code above is very explicit about exactly what Formik is doing. onChange -&gt; handleChange, onBlur -&gt; handleBlur, and so on. However, to save you time, Formik comes with a few extra components to make life easier and less verbose: , , and . They use React context to hook into the parent  state/methods.</p> <p>Exmple:</p> <pre><code>// Render Prop\nimport React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\n\nconst Basic = () =&gt; (\n  &lt;div&gt;\n    &lt;h1&gt;Any place in your app!&lt;/h1&gt;\n    &lt;Formik\n      initialValues={{ email: '', password: '' }}\n      validate={values =&gt; {\n        const errors = {};\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        }\n        return errors;\n      }}\n      onSubmit={(values, { setSubmitting }) =&gt; {\n        setTimeout(() =&gt; {\n          alert(JSON.stringify(values, null, 2));\n          setSubmitting(false);\n        }, 400);\n      }}\n    &gt;\n      {({ isSubmitting }) =&gt; (\n        &lt;Form&gt;\n          &lt;Field type=\"email\" name=\"email\" /&gt;\n          &lt;ErrorMessage name=\"email\" component=\"div\" /&gt;\n          &lt;Field type=\"password\" name=\"password\" /&gt;\n          &lt;ErrorMessage name=\"password\" component=\"div\" /&gt;\n          &lt;button type=\"submit\" disabled={isSubmitting}&gt;\n            Submit\n          &lt;/button&gt;\n        &lt;/Form&gt;\n      )}\n    &lt;/Formik&gt;\n  &lt;/div&gt;\n);\n\nexport default Basic;\n</code></pre> <p>Core Concept in Formik</p> Term What It Means <code>initialValues</code> The starting/default values for your form fields <code>validationSchema</code> A <code>Yup</code> object that defines rules for each field (e.g., email must be valid) <code>onSubmit</code> Function to run when the form is submitted <code>handleChange</code> Function that updates the field's value (same as <code>onChange</code>) <code>handleBlur</code> Marks the field as \"touched\" (used for when to show error messages) <code>handleSubmit</code> Function that handles form submission logic <code>values</code> An object containing all the current values entered by the user <code>errors</code> Object containing validation errors <code>touched</code> Tracks which fields the user has interacted with <p>Example with full core componets:</p> <pre><code>import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { TextField, Button, Typography } from '@mui/material';\n\n&lt;Formik\n  initialValues={{ name: '', email: '' }}\n  validationSchema={Yup.object({\n    name: Yup.string().required('Name is required'),\n    email: Yup.string().email('Invalid email').required('Email is required'),\n  })}\n  onSubmit={(values) =&gt; {\n    console.log(values); // handle your data\n  }}\n&gt;\n  {({\n    handleSubmit,\n    handleChange,\n    handleBlur,\n    values,\n    errors,\n    touched,\n  }) =&gt; (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;TextField\n        name=\"name\"\n        label=\"Name\"\n        value={values.name}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        error={touched.name &amp;&amp; Boolean(errors.name)}\n        helperText={touched.name &amp;&amp; errors.name}\n        fullWidth\n        margin=\"normal\"\n      /&gt;\n\n      &lt;TextField\n        name=\"email\"\n        label=\"Email\"\n        value={values.email}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        error={touched.email &amp;&amp; Boolean(errors.email)}\n        helperText={touched.email &amp;&amp; errors.email}\n        fullWidth\n        margin=\"normal\"\n      /&gt;\n\n      &lt;Button type=\"submit\" variant=\"contained\"&gt;\n        Submit\n      &lt;/Button&gt;\n    &lt;/form&gt;\n  )}\n&lt;/Formik&gt;\n</code></pre> <p>Example 2</p> <pre><code>import React from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  TextField,\n  Checkbox,\n  Switch,\n  Slider,\n  FormControlLabel,\n  Button,\n  Box,\n  Paper,\n  Typography,\n  Divider,\n} from '@mui/material';\n\nconst PreferencesForm = () =&gt; {\n  return (\n    &lt;Paper elevation={3} sx={{ maxWidth: 500, mx: 'auto', mt: 5, p: 4 }}&gt;\n      &lt;Typography variant=\"h5\" gutterBottom&gt;\n        User Preferences\n      &lt;/Typography&gt;\n\n      &lt;Formik\n        initialValues={{\n          fullName: '',\n          subscribe: false,\n          notifications: true,\n          volume: 30,\n        }}\n        validationSchema={Yup.object({\n          fullName: Yup.string()\n            .min(2, 'Too short')\n            .required('Full Name is required'),\n        })}\n        onSubmit={(values) =&gt; {\n          console.log('Submitted Values:', values);\n        }}\n      &gt;\n        {({\n          values,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          setFieldValue,\n          touched,\n          errors,\n        }) =&gt; (\n          &lt;form onSubmit={handleSubmit}&gt;\n            {/* TextField */}\n            &lt;TextField\n              fullWidth\n              label=\"Full Name\"\n              name=\"fullName\"\n              value={values.fullName}\n              onChange={handleChange}\n              onBlur={handleBlur}\n              error={touched.fullName &amp;&amp; Boolean(errors.fullName)}\n              helperText={touched.fullName &amp;&amp; errors.fullName}\n              margin=\"normal\"\n            /&gt;\n\n            {/* Checkbox */}\n            &lt;FormControlLabel\n              control={\n                &lt;Checkbox\n                  name=\"subscribe\"\n                  checked={values.subscribe}\n                  onChange={handleChange}\n                /&gt;\n              }\n              label=\"Subscribe to newsletter\"\n            /&gt;\n\n            {/* Switch */}\n            &lt;FormControlLabel\n              control={\n                &lt;Switch\n                  name=\"notifications\"\n                  checked={values.notifications}\n                  onChange={handleChange}\n                /&gt;\n              }\n              label=\"Enable Notifications\"\n            /&gt;\n\n            &lt;Divider sx={{ my: 3 }} /&gt;\n\n            {/* Slider */}\n            &lt;Typography gutterBottom&gt;\n              Volume: {values.volume}%\n            &lt;/Typography&gt;\n            &lt;Slider\n              name=\"volume\"\n              value={values.volume}\n              onChange={(e, val) =&gt; setFieldValue('volume', val)}\n              min={0}\n              max={100}\n              step={10}\n              valueLabelDisplay=\"auto\"\n            /&gt;\n\n            &lt;Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              fullWidth\n              sx={{ mt: 3 }}\n            &gt;\n              Save Preferences\n            &lt;/Button&gt;\n          &lt;/form&gt;\n        )}\n      &lt;/Formik&gt;\n    &lt;/Paper&gt;\n  );\n};\n\nexport default PreferencesForm;\n</code></pre> <p>React Hook Form</p> <p>React Hook Form (RHF) is a library that lets you build and validate forms in React with less code and better performance.</p> <p>It uses:</p> <ul> <li> <p>React hooks (useForm, Controller)</p> </li> <li> <p>Smart re-rendering logic</p> </li> <li> <p>Works with any UI library, including Material UI</p> </li> </ul> <p>comparison with formik</p> Feature Formik React Hook Form Re-renders More (every change triggers re-render) Fewer (re-renders only changed inputs) Setup Easy but more verbose Minimal, clean, efficient Validation Yup (external) Yup (also supported) Performance Slower in large forms Faster and more scalable Integration Manual binding Use <code>Controller</code> for external inputs <pre><code>npm install react-hook-form\nnpm install @hookform/resolvers yup\n</code></pre> <p>Core concepts in RHF</p> Term Meaning <code>useForm()</code> Hook that creates and manages the form <code>register()</code> Connects native HTML inputs to RHF <code>Controller</code> Connects external inputs like Material UI (TextField, Slider) <code>handleSubmit()</code> Function that processes form submission <code>formState</code> Gives you access to <code>errors</code>, <code>touchedFields</code>, <code>isDirty</code>, etc. <code>setValue()</code> Allows manual setting of field values <p>Example:</p> <pre><code>import {\n  useForm,\n  Controller\n} from 'react-hook-form';\nimport {\n  TextField,\n  Checkbox,\n  Switch,\n  Slider,\n  Button,\n  FormControlLabel,\n  Paper,\n  Typography,\n  Divider,\n} from '@mui/material';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as Yup from 'yup';\n\nconst validationSchema = Yup.object({\n  fullName: Yup.string().required('Full name is required'),\n});\n\nexport default function RHFForm() {\n  const {\n    control,\n    handleSubmit,\n    register,\n    formState: { errors }\n  } = useForm({\n    defaultValues: {\n      fullName: '',\n      subscribe: false,\n      notifications: true,\n      volume: 40\n    },\n    resolver: yupResolver(validationSchema)\n  });\n\n  const onSubmit = (data) =&gt; {\n    console.log('Submitted:', data);\n  };\n\n  return (\n    &lt;Paper elevation={4} sx={{ p: 4, maxWidth: 500, mx: 'auto', mt: 5 }}&gt;\n      &lt;Typography variant=\"h5\" gutterBottom&gt;\n        React Hook Form - User Preferences\n      &lt;/Typography&gt;\n\n      &lt;form onSubmit={handleSubmit(onSubmit)}&gt;\n\n        {/* TextField */}\n        &lt;Controller\n          name=\"fullName\"\n          control={control}\n          render={({ field }) =&gt; (\n            &lt;TextField\n              label=\"Full Name\"\n              fullWidth\n              margin=\"normal\"\n              {...field}\n              error={Boolean(errors.fullName)}\n              helperText={errors.fullName?.message}\n            /&gt;\n          )}\n        /&gt;\n\n        {/* Checkbox */}\n        &lt;Controller\n          name=\"subscribe\"\n          control={control}\n          render={({ field }) =&gt; (\n            &lt;FormControlLabel\n              control={&lt;Checkbox {...field} checked={field.value} /&gt;}\n              label=\"Subscribe to newsletter\"\n            /&gt;\n          )}\n        /&gt;\n\n        {/* Switch */}\n        &lt;Controller\n          name=\"notifications\"\n          control={control}\n          render={({ field }) =&gt; (\n            &lt;FormControlLabel\n              control={&lt;Switch {...field} checked={field.value} /&gt;}\n              label=\"Enable Notifications\"\n            /&gt;\n          )}\n        /&gt;\n\n        &lt;Divider sx={{ my: 3 }} /&gt;\n\n        {/* Slider */}\n        &lt;Typography gutterBottom&gt;\n          Volume: &lt;strong&gt;{control._formValues.volume}%&lt;/strong&gt;\n        &lt;/Typography&gt;\n        &lt;Controller\n          name=\"volume\"\n          control={control}\n          render={({ field }) =&gt; (\n            &lt;Slider\n              value={field.value}\n              onChange={(_, val) =&gt; field.onChange(val)}\n              min={0}\n              max={100}\n              step={10}\n              valueLabelDisplay=\"auto\"\n            /&gt;\n          )}\n        /&gt;\n\n        &lt;Button type=\"submit\" variant=\"contained\" fullWidth sx={{ mt: 3 }}&gt;\n          Submit Preferences\n        &lt;/Button&gt;\n      &lt;/form&gt;\n    &lt;/Paper&gt;\n  );\n}\n</code></pre>"},{"location":"#navigation-components","title":"Navigation Components","text":"<p>AppBar and ToolBar</p> <p>AppBar is a Material UI component used to create a top bar in your application \u2014 like a navigation header or site title bar.</p> <p>It usually contains:</p> <ul> <li> <p>The site title or logo</p> </li> <li> <p>Navigation buttons (like \u201cHome\u201d, \u201cProfile\u201d)</p> </li> <li> <p>Sometimes menus, icons, or a search bar</p> </li> </ul> <p>Think of it like the \"top bar\" you see in all apps or websites.</p> <p>Toolbar is a flexible container inside the AppBar used to align and space its content (like title, buttons, menus, etc.).</p> <p>It behaves like a box that arranges children horizontally, with padding and spacing.</p> <p>Example:</p> <pre><code>import { AppBar, Toolbar, Typography } from '@mui/material';\n\n&lt;AppBar position=\"static\"&gt;\n  &lt;Toolbar&gt;\n    &lt;Typography variant=\"h6\"&gt;\n      My App\n    &lt;/Typography&gt;\n  &lt;/Toolbar&gt;\n&lt;/AppBar&gt;\n</code></pre> Component Purpose <code>AppBar</code> Main top bar container (like a nav wrapper) <code>position</code> Controls if it\u2019s fixed, sticky, absolute, or static <code>Toolbar</code> Holds the actual content (title, icons, buttons) <code>Typography</code> Used here as the app\u2019s title (like <code>&lt;h1&gt;</code>) <p>Properties</p> <p>postion prop: staic,fixed,absolute,sticky</p> <p>color prop:primary,secondary,inherit,transparent</p> <p>Drawer (Sidebar Navigation)</p> <p>A Drawer is a panel (like a sidebar) that slides in from the side of the screen. It's used for navigation or menu content, especially on mobile or dashboard apps.</p> <p>Components</p> Component Role <code>Drawer</code> The sliding panel itself <code>List</code> Wraps all menu items <code>ListItem</code>, <code>ListItemButton</code> Each row inside the drawer (like \u201cHome\u201d, \u201cAbout\u201d) <code>ListItemText</code> The label inside the row <code>IconButton</code> The menu button (usually in the AppBar) <code>MenuIcon</code> The hamburger icon (\u2630) <p>Types of Drawer (Controlled by variant prop)</p> <p>Material UI gives three types of Drawer based on how they behave:</p> Variant Behavior <code>temporary</code> Slides over the page. Disappears when user clicks outside (default) <code>permanent</code> Always visible. Used in dashboards (like Gmail sidebar) <code>persistent</code> Slides in and stays open until manually closed <pre><code>&lt;Drawer variant=\"temporary\" /&gt;\n&lt;Drawer variant=\"permanent\" /&gt;\n&lt;Drawer variant=\"persistent\" /&gt;\n</code></pre> <p>Props for Drawer</p> Prop Type Description <code>anchor</code> `'left' 'right' 'top' 'bottom'` Side from which drawer slides in <code>open</code> <code>boolean</code> Controls whether drawer is open or not (used with state) <code>onClose</code> <code>function</code> Function called when drawer should close (like when clicking background) <code>variant</code> string <code>\"temporary\"</code> (default), <code>\"persistent\"</code>, or <code>\"permanent\"</code> <code>sx</code> object Inline styling (background, width, etc.) <code>PaperProps</code> object Style the inside surface of the drawer (<code>backgroundColor</code>, etc.) <p>What Components Go Inside a Drawer</p> Component Use <code>Box</code> Wraps the content and sets drawer width <code>List</code> Vertical container for navigation links <code>ListItem</code> Represents one row (like one link) <code>ListItemButton</code> Makes <code>ListItem</code> clickable <code>ListItemIcon</code> Adds an icon to the left of the text <code>ListItemText</code> Displays the label (like \u201cHome\u201d, \u201cAbout\u201d) <p>Styling Drawer</p> <pre><code>&lt;Drawer\n  sx={{ '&amp; .MuiDrawer-paper': { width: 250, backgroundColor: '#111' } }}\n  open={open}\n&gt;\n</code></pre> <ul> <li> <p>&amp; .MuiDrawer-paper targets the inner part (the sliding sheet)</p> </li> <li> <p>You can also use PaperProps to style:</p> </li> </ul> <pre><code>&lt;Drawer PaperProps={{ sx: { backgroundColor: 'blue' } }} /&gt;\n</code></pre> <p>To show/hide the drawer ,you use react state</p> <pre><code>const [open, setOpen] = useState(false);\n\n// open\nsetOpen(true);\n\n// close (e.g., after clicking background)\nsetOpen(false);\n</code></pre> <p>Then pass the states </p> <p>```   setOpen(false)} /&gt; <pre><code>\nExample\n\n```bash\nimport React, { useState } from 'react';\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  IconButton,\n  Drawer,\n  List,\n  ListItem,\n  ListItemButton,\n  ListItemText,\n  Box,\n} from '@mui/material';\nimport MenuIcon from '@mui/icons-material/Menu';\n\nexport default function SidebarDrawer() {\n  const [open, setOpen] = useState(false); // state controls visibility\n  const menuItems = ['Home', 'About', 'Portfolio', 'Contact'];\n\n  return (\n    &lt;&gt;\n      {/* Top Navigation Bar */}\n      &lt;AppBar position=\"static\"&gt;\n        &lt;Toolbar&gt;\n          &lt;IconButton edge=\"start\" color=\"inherit\" onClick={() =&gt; setOpen(true)}&gt;\n            &lt;MenuIcon /&gt;\n          &lt;/IconButton&gt;\n\n          &lt;Typography variant=\"h6\" sx={{ flexGrow: 1 }}&gt;\n            MySite\n          &lt;/Typography&gt;\n        &lt;/Toolbar&gt;\n      &lt;/AppBar&gt;\n\n      {/* Drawer (Sidebar) */}\n      &lt;Drawer\n        anchor=\"left\"\n        open={open}\n        onClose={() =&gt; setOpen(false)}\n        PaperProps={{\n          sx: { width: 250, backgroundColor: '#f4f4f4' },\n        }}\n      &gt;\n        &lt;Box role=\"presentation\" onClick={() =&gt; setOpen(false)}&gt;\n          &lt;List&gt;\n            {menuItems.map((text) =&gt; (\n              &lt;ListItem key={text} disablePadding&gt;\n                &lt;ListItemButton&gt;\n                  &lt;ListItemText primary={text} /&gt;\n                &lt;/ListItemButton&gt;\n              &lt;/ListItem&gt;\n            ))}\n          &lt;/List&gt;\n        &lt;/Box&gt;\n      &lt;/Drawer&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre> <p>What Is BottomNavigation?</p> <p>BottomNavigation is a horizontal bar placed at the bottom of the screen that lets users switch between different views or sections \u2014 like tabs for mobile apps.</p> <p>Related Components in BottomNavigation</p> Component Purpose <code>BottomNavigation</code> The main bar container <code>BottomNavigationAction</code> Represents one tab (e.g., \"Home\", \"Search\") <p>props for BottomNavigation</p> Prop Type Description <code>value</code> number The index of the selected tab <code>onChange</code> function Called when a tab is clicked. You update the state <code>showLabels</code> boolean If true, labels are always shown. If false, only show when selected <p>props for BottomNavigationAction</p> Prop Type Description <code>label</code> string The name under the icon <code>icon</code> ReactNode Usually a Material Icon <code>value</code> string/number Optional ID of this action <code>sx</code> object For styling spacing, color, etc. <p>What are TABS</p> <p>Tabs allow users to switch between different sections of content on the same page \u2014 usually seen at the top of a card, panel, or view.</p> <p>What Tabs Do:</p> <ul> <li> <p>Show multiple sections under a single view</p> </li> <li> <p>Only one section is visible at a time</p> </li> <li> <p>Clicking a tab updates the visible content</p> </li> </ul> <p>Related Components for Tabs</p> Component Role <code>Tabs</code> Wraps all tab labels <code>Tab</code> Represents each clickable tab <code>TabPanel</code> (Manual) A box to hold the content under a tab <code>Box</code> Used for layout and spacing <p>important Props for Tabs</p> Prop Description <code>value</code> Which tab is currently selected (a number) <code>onChange</code> Function called when tab changes <code>indicatorColor</code> Color of the underline under active tab <code>textColor</code> Color of tab text (<code>inherit</code>, <code>primary</code>, <code>secondary</code>) <p>Exmple:Combined tabs and BottomNavigation</p> <pre><code>import React, { useState } from 'react';\nimport {\n  Tabs,\n  Tab,\n  Box,\n  Typography,\n  BottomNavigation,\n  BottomNavigationAction,\n  Paper\n} from '@mui/material';\nimport HomeIcon from '@mui/icons-material/Home';\nimport PersonIcon from '@mui/icons-material/Person';\nimport SettingsIcon from '@mui/icons-material/Settings';\n\nexport default function TabAndBottomNavExample() {\n  const [tabIndex, setTabIndex] = useState(0);\n  const [bottomNav, setBottomNav] = useState(0);\n\n  return (\n    &lt;&gt;\n      {/* Tabs at the Top */}\n      &lt;Box sx={{ width: '100%', bgcolor: 'background.paper' }}&gt;\n        &lt;Tabs value={tabIndex} onChange={(e, newVal) =&gt; setTabIndex(newVal)} centered&gt;\n          &lt;Tab label=\"Posts\" /&gt;\n          &lt;Tab label=\"Media\" /&gt;\n          &lt;Tab label=\"Mentions\" /&gt;\n        &lt;/Tabs&gt;\n\n        {tabIndex === 0 &amp;&amp; &lt;TabPanel&gt;Posts content&lt;/TabPanel&gt;}\n        {tabIndex === 1 &amp;&amp; &lt;TabPanel&gt;Media content&lt;/TabPanel&gt;}\n        {tabIndex === 2 &amp;&amp; &lt;TabPanel&gt;Mentions content&lt;/TabPanel&gt;}\n      &lt;/Box&gt;\n\n      {/* Bottom Navigation */}\n      &lt;Paper sx={{ position: 'fixed', bottom: 0, left: 0, right: 0 }} elevation={3}&gt;\n        &lt;BottomNavigation\n          value={bottomNav}\n          onChange={(e, newVal) =&gt; setBottomNav(newVal)}\n          showLabels\n        &gt;\n          &lt;BottomNavigationAction label=\"Home\" icon={&lt;HomeIcon /&gt;} /&gt;\n          &lt;BottomNavigationAction label=\"Profile\" icon={&lt;PersonIcon /&gt;} /&gt;\n          &lt;BottomNavigationAction label=\"Settings\" icon={&lt;SettingsIcon /&gt;} /&gt;\n        &lt;/BottomNavigation&gt;\n      &lt;/Paper&gt;\n    &lt;/&gt;\n  );\n}\n\n// TabPanel: simple content wrapper\nfunction TabPanel({ children }) {\n  return (\n    &lt;Box sx={{ p: 3 }}&gt;\n      &lt;Typography&gt;{children}&lt;/Typography&gt;\n    &lt;/Box&gt;\n  );\n}\n</code></pre>"},{"location":"#what-are-breadcrumbs","title":"What Are Breadcrumbs?","text":"<p>Breadcrumbs are a navigation aid that shows users their current location in a site's hierarchy \u2014 like a trail that shows where you came from.</p> <p>Example:</p> <p>You might see this on a shopping site like Amazon:</p> <pre><code>Home / Electronics / Computers / Laptops\n</code></pre> <p>Each part is clickable, helping the user navigate back to higher-level categories.</p> <p>Why Use Breadcrumbs?</p> <ul> <li> <p>Show users where they are inside your app</p> </li> <li> <p>Let them easily go back to a parent page</p> </li> <li> <p>Helps with SEO and accessibility too</p> </li> </ul> <p>Components involved in Breadcrumbs</p> Component Role <code>Breadcrumbs</code> The wrapper that handles the layout and separator <code>Link</code> (MUI) Used for clickable items (e.g. \u201cHome\u201d) <code>Typography</code> Used for the current page (non-clickable) <code>NavigateNextIcon</code> The arrow used as the default separator (&gt;) <p>Props for Breadcrumbs</p> Prop Type Description <code>separator</code> node/string What to show between items (default is <code>/</code> or <code>&gt;</code> icon) <code>aria-label</code> string Used for accessibility (e.g. <code>\"breadcrumb\"</code>) <code>maxItems</code> number Collapses items if too many (e.g., shows <code>...</code>) <code>itemsBeforeCollapse</code> number How many to show before collapse (if <code>maxItems</code> is used) <code>itemsAfterCollapse</code> number How many to show after the collapse <p>Example:</p> <pre><code>import React from 'react';\nimport { Breadcrumbs, Link, Typography } from '@mui/material';\nimport NavigateNextIcon from '@mui/icons-material/NavigateNext';\n\nexport default function BreadcrumbNav() {\n  return (\n    &lt;Breadcrumbs\n      separator={&lt;NavigateNextIcon fontSize=\"small\" /&gt;}\n      aria-label=\"breadcrumb\"\n    &gt;\n      &lt;Link underline=\"hover\" color=\"inherit\" href=\"/\"&gt;\n        Home\n      &lt;/Link&gt;\n      &lt;Link underline=\"hover\" color=\"inherit\" href=\"/blog\"&gt;\n        Blog\n      &lt;/Link&gt;\n      &lt;Link underline=\"hover\" color=\"inherit\" href=\"/blog/articles\"&gt;\n        Articles\n      &lt;/Link&gt;\n      &lt;Typography color=\"text.primary\"&gt;How to Use Breadcrumbs&lt;/Typography&gt;\n    &lt;/Breadcrumbs&gt;\n  );\n}\n</code></pre> <p>note: You can change separator to anything</p> <pre><code>separator=\"\u2022\"   // bullet\nseparator=\"\u2192\"   // arrow\n</code></pre>"},{"location":"#link-and-buttonlink-usage-in-material-ui","title":"Link and ButtonLink Usage in Material UI","text":"<p>link</p> <p>Material UI\u2019s Link is a component used to create text-based navigation links that look like normal links but are styled using Material UI's theme. It\u2019s like an improved  tag with theme awareness and better styling. <p>You can use it for:</p> <ul> <li> <p>Navigating between pages (using href)</p> </li> <li> <p>Navigating inside an app (with React Router)</p> </li> <li> <p>Styling links that look consistent with the Material theme</p> </li> </ul> <p>Note Don\u2019t confuse it with React Router\u2019s Link!</p> <code>@mui/material/Link</code> Use for style + links <code>react-router-dom/Link</code> Use for client-side routing in React Router <p>All Important Props for MUI Link</p> Prop Type Purpose <code>href</code> string Destination path (like in <code>&lt;a href=\"\"&gt;</code>) <code>underline</code> string <code>'always'</code>, <code>'hover'</code>, <code>'none'</code> \u2014 controls how underline appears <code>color</code> string <code>'primary'</code>, <code>'secondary'</code>, <code>'inherit'</code>, <code>'textPrimary'</code>, etc. <code>component</code> ReactType Allows replacing it with <code>react-router-dom</code>'s <code>Link</code> for routing <code>sx</code> object Style overrides (padding, margin, fontSize, etc.) <p>How to Make MUI Link Work With React Router?</p> <p>If you're using React Router, and want a client-side link (no page reload), you need to do:</p> <pre><code>import { Link as RouterLink } from 'react-router-dom';\nimport { Link as MUILink } from '@mui/material';\n\n&lt;MUILink component={RouterLink} to=\"/about\"&gt;\n  Go to About\n&lt;/MUILink&gt;\n</code></pre> <p>What Is a \u201cButtonLink\u201d?</p> <p>A ButtonLink is not a special component \u2014 it\u2019s simply using a Button as a link by setting the component=\"a\" or component={RouterLink}.</p> <pre><code>&lt;Button component=\"a\" href=\"/docs\"&gt;\n  Docs\n&lt;/Button&gt;\n</code></pre> <p>Or, with React Router:</p> <pre><code>&lt;Button component={RouterLink} to=\"/contact\"&gt;\n  Contact\n&lt;/Button&gt;\n</code></pre> <p>Why Use ButtonLink?</p> <p>You want the look of a button, but it should behave like a link</p> <p>Ideal for navigation menus, call-to-actions, etc.</p> <p>Example:</p> <pre><code>import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { Link, Button, Stack } from '@mui/material';\n\nexport default function LinkExample() {\n  return (\n    &lt;Stack spacing={2}&gt;\n      {/* Text-style link using href */}\n      &lt;Link href=\"/home\" underline=\"hover\" color=\"primary\"&gt;\n        Go to Home (classic link)\n      &lt;/Link&gt;\n\n      {/* Text-style link using React Router */}\n      &lt;Link component={RouterLink} to=\"/about\" color=\"secondary\" underline=\"always\"&gt;\n        About Page (router link)\n      &lt;/Link&gt;\n\n      {/* Button that acts as a link (with href) */}\n      &lt;Button variant=\"contained\" component=\"a\" href=\"/docs\"&gt;\n        View Docs\n      &lt;/Button&gt;\n\n      {/* Button link using React Router */}\n      &lt;Button variant=\"outlined\" component={RouterLink} to=\"/contact\"&gt;\n        Contact Us\n      &lt;/Button&gt;\n    &lt;/Stack&gt;\n  );\n}\n</code></pre>"},{"location":"#feedback-and-ui-elements","title":"Feedback and UI Elements","text":""},{"location":"#dialog-modal-in-material-ui","title":"Dialog (Modal) in Material UI","text":"<p>A Dialog is a popup (modal) window that appears on top of your content to show important information or ask for a decision.</p> <p>n/b It blocks interaction with the rest of the UI until the user closes it or responds.</p> <p>UseCases:</p> Use Case Dialog Purpose \u201cAre you sure you want to delete?\u201d Confirmation prompt \u201cLogin / Sign Up\u201d Shows a form inside a popup \u201cYour session has expired\u201d Notification of status <p>Components Used in a Dialog</p> Component Purpose <code>Dialog</code> Main wrapper for the popup/modal <code>DialogTitle</code> Title bar at the top <code>DialogContent</code> Main area inside the dialog \u2014 text, forms, etc. <code>DialogActions</code> Bottom row for buttons like \u201cCancel\u201d or \u201cOK\u201d <code>DialogContentText</code> Optional helper text within <code>DialogContent</code> <p>You can use any material ui component inside the dialog component</p> <p>Main prop for Dialog</p> Prop Type What It Does <code>open</code> <code>boolean</code> Controls whether the dialog is visible <code>onClose</code> <code>function</code> Called when user clicks outside or hits Escape <code>fullWidth</code> <code>boolean</code> Makes dialog take full width of its container <code>maxWidth</code> `'xs' 'sm' 'md' 'lg' 'xl' false` Controls dialog size <code>fullScreen</code> <code>boolean</code> If true, dialog fills entire screen (good for mobile) <code>scroll</code> `'body' 'paper'` Determines scrolling area inside dialog <code>PaperProps</code> <code>object</code> To style the dialog paper (e.g., backgroundColor) <p>Dialod | Modal | Alert</p> Term Meaning Modal Any UI element that blocks the background Dialog A type of modal used for structured interaction (form, confirm) Alert Simple notification \u2014 often non-blocking (e.g. Snackbar) <p>Example:Controlled</p> <pre><code>import React, { useState } from 'react';\nimport {\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n} from '@mui/material';\n\nexport default function ConfirmDialog() {\n  const [open, setOpen] = useState(false);\n\n  const handleOpen = () =&gt; setOpen(true);\n  const handleClose = () =&gt; setOpen(false);\n  const handleConfirm = () =&gt; {\n    alert('Item deleted!');\n    setOpen(false);\n  };\n\n  return (\n    &lt;&gt;\n      &lt;Button variant=\"contained\" color=\"error\" onClick={handleOpen}&gt;\n        Delete\n      &lt;/Button&gt;\n\n      &lt;Dialog open={open} onClose={handleClose}&gt;\n        &lt;DialogTitle&gt;Confirm Delete&lt;/DialogTitle&gt;\n        &lt;DialogContent&gt;\n          &lt;DialogContentText&gt;\n            Are you sure you want to delete this item? This action cannot be undone.\n          &lt;/DialogContentText&gt;\n        &lt;/DialogContent&gt;\n        &lt;DialogActions&gt;\n          &lt;Button onClick={handleClose} color=\"primary\"&gt;\n            Cancel\n          &lt;/Button&gt;\n          &lt;Button onClick={handleConfirm} color=\"error\" autoFocus&gt;\n            Delete\n          &lt;/Button&gt;\n        &lt;/DialogActions&gt;\n      &lt;/Dialog&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>"},{"location":"#snackbar-and-alerts-in-material-ui","title":"Snackbar and Alerts in Material UI","text":"<p>What is Snackbar</p> <p>A Snackbar is a small popup bar (usually at the bottom of the screen) that shows short messages or notifications.It automatically disappears after a few seconds, but can also be dismissed manually.</p> <p>Where You\u2019ve Seen It: - \u201cItem added to cart\u201d ,\u201cMessage sent\u201d , \u201cCopied to clipboard\u201d</p> <p>These are Snackbars \u2014 they inform the user about something that just happened.</p> <p>Alert</p> <p>An Alert is a message box used to show important information, warnings, or errors with different colors and icons.It can be used inside a Snackbar or shown alone in the page layout.</p> <p>Example of Alert Types:</p> Alert Type Purpose Color <code>success</code> Success or confirmation Green <code>error</code> Something went wrong Red <code>warning</code> Caution needed Amber <code>info</code> Informational Blue <p>Components Involved</p> Component Role <code>Snackbar</code> Wrapper for the popup message box <code>Alert</code> The message content (can be used inside <code>Snackbar</code>) <code>AlertTitle</code> Optional \u2014 adds a bold title to the alert <p>Snackbar Props</p> Prop Type Description <code>open</code> boolean Controls if it\u2019s visible <code>onClose</code> function Called when it closes (after timeout or click) <code>autoHideDuration</code> number Time in ms before auto-dismiss <code>message</code> string Text shown in the snackbar (basic usage) <code>anchorOrigin</code> object Controls where the snackbar appears <code>action</code> node Optional buttons inside (like \u201cUndo\u201d) <p>anchorOrigin Format</p> <pre><code>anchorOrigin={{\n  vertical: 'top' | 'bottom',\n  horizontal: 'left' | 'center' | 'right'\n}}\n\n</code></pre> <pre><code>anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n</code></pre> <p>Alert Props</p> Prop Type Description <code>severity</code> string <code>error</code>, <code>warning</code>, <code>info</code>, <code>success</code> <code>variant</code> string <code>standard</code>, <code>filled</code>, <code>outlined</code> <code>onClose</code> function Closes the alert if dismissible <code>icon</code> ReactNode Custom icon (optional) <p>Example full:</p> <pre><code>import React, { useState } from 'react';\nimport {\n  Snackbar,\n  Alert,\n  AlertTitle,\n  Button,\n  Stack\n} from '@mui/material';\n\nexport default function SnackbarAlertExample() {\n  const [open, setOpen] = useState(false);\n\n  const handleClick = () =&gt; setOpen(true);\n  const handleClose = (event, reason) =&gt; {\n    if (reason === 'clickaway') return;\n    setOpen(false);\n  };\n\n  return (\n    &lt;Stack spacing={2}&gt;\n      &lt;Button variant=\"contained\" onClick={handleClick}&gt;\n        Show Success Message\n      &lt;/Button&gt;\n\n      &lt;Snackbar\n        open={open}\n        autoHideDuration={4000}\n        onClose={handleClose}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n      &gt;\n        &lt;Alert severity=\"success\" variant=\"filled\" onClose={handleClose}&gt;\n          &lt;AlertTitle&gt;Success&lt;/AlertTitle&gt;\n          You have successfully completed the action!\n        &lt;/Alert&gt;\n      &lt;/Snackbar&gt;\n    &lt;/Stack&gt;\n  );\n}\n</code></pre>"},{"location":"#progress-indicators-circular-linear","title":"Progress Indicators (Circular &amp; Linear)","text":"<p>Progress Indicators visually show that something is loading, processing, or ongoing.</p> <p>Two Types in Material UI</p> Type Description Example Use Case <code>LinearProgress</code> A horizontal bar that fills left to right File upload, page load <code>CircularProgress</code> A spinning circle Loading spinner, waiting state <p>CircularProgress</p> <p>A circular spinner that rotates continuously or fills like a pie chart (depending on mode).</p> <pre><code>import CircularProgress from '@mui/material/CircularProgress';\n\n</code></pre> <p>Main Props for circular progress</p> Prop Type Description <code>color</code> string <code>\"primary\"</code>, <code>\"secondary\"</code>, <code>\"inherit\"</code> <code>size</code> number Diameter in pixels (e.g., <code>40</code>, <code>60</code>, etc.) <code>thickness</code> number How bold the stroke is (default: <code>3.6</code>) <code>variant</code> string <code>\"indeterminate\"</code> (default), <code>\"determinate\"</code> <code>value</code> number From <code>0</code> to <code>100</code> \u2014 used only in determinate <p>LinearProgress A horizontal bar that fills from left to right, either endlessly or based on a progress value.</p> <pre><code>import LinearProgress from '@mui/material/LinearProgress';\n</code></pre> <p>Main Props</p> Prop Type Description <code>variant</code> string <code>\"indeterminate\"</code> or <code>\"determinate\"</code> <code>value</code> number From <code>0</code> to <code>100</code> (used in <code>determinate</code>) <code>color</code> string <code>\"primary\"</code>, <code>\"secondary\"</code>, <code>\"success\"</code> etc. <code>sx</code> object Styling (e.g., width, margin, background) Type Behavior Indeterminate Spinner or bar keeps looping (unknown duration) Determinate Fills up based on a value (known percentage) <p>when to use what</p> Scenario Use App is waiting on data load Circular (indeterminate) Uploading a file (know % done) Linear (determinate) Showing background task Circular (small, corner) <p>Example Code:</p> <pre><code>import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  CircularProgress,\n  LinearProgress,\n  Typography,\n  Button,\n  Stack\n} from '@mui/material';\n\nexport default function ProgressExample() {\n  const [progress, setProgress] = useState(0);\n  const [loading, setLoading] = useState(false);\n\n  const handleStart = () =&gt; {\n    setLoading(true);\n    setProgress(0);\n  };\n\n  useEffect(() =&gt; {\n    if (!loading) return;\n\n    const timer = setInterval(() =&gt; {\n      setProgress((prev) =&gt; {\n        if (prev &gt;= 100) {\n          setLoading(false);\n          clearInterval(timer);\n          return 100;\n        }\n        return prev + 10;\n      });\n    }, 500);\n\n    return () =&gt; clearInterval(timer);\n  }, [loading]);\n\n  return (\n    &lt;Box sx={{ width: '100%', textAlign: 'center', mt: 4 }}&gt;\n      &lt;Stack spacing={2} alignItems=\"center\"&gt;\n        &lt;Button variant=\"contained\" onClick={handleStart}&gt;\n          Start Task\n        &lt;/Button&gt;\n\n        {loading ? (\n          &lt;&gt;\n            &lt;CircularProgress color=\"primary\" /&gt;\n            &lt;LinearProgress\n              variant=\"determinate\"\n              value={progress}\n              sx={{ width: '60%' }}\n            /&gt;\n            &lt;Typography variant=\"body2\"&gt;{progress}% completed&lt;/Typography&gt;\n          &lt;/&gt;\n        ) : (\n          &lt;Typography variant=\"h6\" color=\"success.main\"&gt;\n            Task complete!\n          &lt;/Typography&gt;\n        )}\n      &lt;/Stack&gt;\n    &lt;/Box&gt;\n  );\n}\n</code></pre>"},{"location":"#backdrop-and-skeleton-loaders","title":"Backdrop and Skeleton Loaders","text":"<p>A Backdrop is a semi-transparent screen that covers your app and visually blocks interaction. It\u2019s usually shown when the app is loading or waiting for a task to complete.</p> <p>When to Use a Backdrop</p> Situation Why Use Backdrop Submitting a form Show something is in progress and block clicks Loading dashboard data Prevent UI interaction until it's ready Performing sensitive operations Prevent double-submits or errors <p>Props for  Prop Type Description <code>open</code> <code>boolean</code> Controls visibility <code>onClick</code> <code>function</code> Optional \u2014 called when user clicks the backdrop <code>sx</code> <code>object</code> Custom inline styles (e.g., color, zIndex, blur) <code>children</code> <code>node</code> Optional \u2014 you can place a spinner or message inside <p>Common Pair: Backdrop + CircularProgress You\u2019ll often combine Backdrop + CircularProgress to show a centered loading spinner.</p> <p>Example:</p> <pre><code>import React, { useState } from 'react';\nimport { Backdrop, CircularProgress, Button } from '@mui/material';\n\nexport default function BackdropExample() {\n  const [open, setOpen] = useState(false);\n\n  const handleToggle = () =&gt; setOpen(!open);\n\n  return (\n    &lt;&gt;\n      &lt;Button onClick={handleToggle} variant=\"contained\"&gt;\n        {open ? 'Hide' : 'Show'} Backdrop\n      &lt;/Button&gt;\n\n      &lt;Backdrop\n        open={open}\n        sx={{ color: '#fff', zIndex: (theme) =&gt; theme.zIndex.drawer + 1 }}\n      &gt;\n        &lt;CircularProgress color=\"inherit\" /&gt;\n      &lt;/Backdrop&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>"},{"location":"#what-is-a-skeleton","title":"What is a Skeleton","text":"<p>A Skeleton Loader shows a gray placeholder (like an empty box or line) that mimics the shape of the content while it's loading.</p> <p>It improves perceived performance by showing the user something is loading \u2014 instead of just an empty white screen.</p> <p>Props for  Prop Type Description <code>variant</code> string <code>'text'</code>, <code>'rectangular'</code>, <code>'circular'</code> <code>width</code> number or string Width of the skeleton <code>height</code> number or string Height of the skeleton <code>animation</code> string <code>'pulse'</code> (default), <code>'wave'</code>, or <code>false</code> <code>sx</code> object Style overrides (margin, radius, etc.) <p>Skeleton Variants</p> Variant What it looks like <code>text</code> Gray line (like a text line) <code>rectangular</code> Gray block (like a card/image) <code>circular</code> Gray circle (like avatar) <p>Example code:</p> <pre><code>import React, { useState, useEffect } from 'react';\nimport { Skeleton, Card, CardContent, Typography } from '@mui/material';\n\nexport default function SkeletonExample() {\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() =&gt; {\n    // Simulate API load\n    const timer = setTimeout(() =&gt; setLoading(false), 3000);\n    return () =&gt; clearTimeout(timer);\n  }, []);\n\n  return (\n    &lt;Card sx={{ width: 300, m: 2 }}&gt;\n      &lt;CardContent&gt;\n        {loading ? (\n          &lt;&gt;\n            &lt;Skeleton variant=\"text\" width=\"80%\" /&gt;\n            &lt;Skeleton variant=\"text\" width=\"60%\" /&gt;\n            &lt;Skeleton variant=\"rectangular\" width=\"100%\" height={100} sx={{ mt: 2 }} /&gt;\n          &lt;/&gt;\n        ) : (\n          &lt;&gt;\n            &lt;Typography variant=\"h6\"&gt;Hello, John!&lt;/Typography&gt;\n            &lt;Typography variant=\"body2\"&gt;Here is your profile info.&lt;/Typography&gt;\n            &lt;img\n              src=\"https://via.placeholder.com/300x100\"\n              alt=\"Loaded\"\n              style={{ width: '100%', marginTop: 16 }}\n            /&gt;\n          &lt;/&gt;\n        )}\n      &lt;/CardContent&gt;\n    &lt;/Card&gt;\n  );\n}\n</code></pre>"},{"location":"#tooltip-and-popover","title":"Tooltip and Popover","text":"<p>Tooltip</p> <p>Tooltip is a small floating label that appears when the user hovers, focuses, or touches an element.</p> <p>when to use a tooltip</p> Use Case Example Explain icon functions \"What does this button do?\" Provide shortcut keys \u201cCopy (Ctrl + C)\u201d Describe UI labels in more detail \u201cThis setting affects global visibility\u201d <p>Tooltip Props</p> Prop Type Description <code>title</code> string/node The content inside the tooltip (required) <code>placement</code> string Where the tooltip appears (top, bottom, etc.) <code>arrow</code> boolean Adds a pointing arrow <code>enterDelay</code> number Delay before showing (ms) <code>leaveDelay</code> number Delay before hiding (ms) <code>followCursor</code> boolean Tooltip follows the mouse <code>disableHoverListener</code> boolean Prevent hover triggering <p>Placement oprtions:</p> Placement Value Tooltip Position <code>\"top\"</code> Above the element <code>\"bottom\"</code> Below the element <code>\"left\"</code> To the left <code>\"right\"</code> To the right Variants like <code>\"top-start\"</code> or <code>\"bottom-end\"</code> also exist <p>exmple:</p> <pre><code>import React from 'react';\nimport { Tooltip, IconButton } from '@mui/material';\nimport InfoIcon from '@mui/icons-material/Info';\n\nexport default function TooltipExample() {\n  return (\n    &lt;Tooltip title=\"More info about this setting\" placement=\"right\" arrow&gt;\n      &lt;IconButton&gt;\n        &lt;InfoIcon /&gt;\n      &lt;/IconButton&gt;\n    &lt;/Tooltip&gt;\n  );\n}\n</code></pre> <p>Popover</p> <p>A Popover is a larger floating panel anchored to a specific element, triggered by a click or focus. It can contain rich content like buttons, text, inputs, etc.</p> <p>when to use a Popover</p> Use Case Example Show extra options \"More Actions\" menu on button click Display related content Profile preview on username click Inline editing or dropdown logic Click-to-edit panels <p>Popover Props</p> Prop Type Description <code>open</code> boolean Whether the popover is visible <code>anchorEl</code> HTMLElement The element it should attach to (click target) <code>onClose</code> function Callback to close the popover <code>anchorOrigin</code> object Controls where it appears in relation to the anchor <code>transformOrigin</code> object Adjusts the popover's internal alignment <code>children</code> node The content shown inside the popover <p>Example code:</p> <pre><code>import React, { useState } from 'react';\nimport {\n  Popover,\n  Typography,\n  Button,\n  Box\n} from '@mui/material';\n\nexport default function PopoverExample() {\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const handleClick = (event) =&gt; {\n    setAnchorEl(event.currentTarget); // Save clicked button\n  };\n\n  const handleClose = () =&gt; {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n\n  return (\n    &lt;&gt;\n      &lt;Button variant=\"contained\" onClick={handleClick}&gt;\n        Show Popover\n      &lt;/Button&gt;\n\n      &lt;Popover\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center'\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'center'\n        }}\n      &gt;\n        &lt;Box sx={{ p: 2 }}&gt;\n          &lt;Typography&gt;This is a popover message.&lt;/Typography&gt;\n        &lt;/Box&gt;\n      &lt;/Popover&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>"},{"location":"#data-display-components","title":"Data Display Components","text":"<p>Avatar and Badge</p> <p>What is an avatar?</p> <p>An Avatar is a small circular or square image that represents a person or object, often used in UIs to show a profile picture or user initials.</p> <p>Key Props of Avatar</p> Prop Type Purpose <code>alt</code> string Text used when image fails to load <code>src</code> string Image URL to show in the avatar <code>sx</code> object System props for styling like size, border, etc. <code>children</code> node You can put text/initials inside (when no image) <code>variant</code> string <code>'circular'</code> (default), <code>'rounded'</code>, or <code>'square'</code> <p>Initials as Avatar</p> <pre><code>&lt;Avatar&gt;JM&lt;/Avatar&gt;\n</code></pre> <p>Image Avatar</p> <pre><code>&lt;Avatar src=\"https://i.pravatar.cc/150\" alt=\"John Kim\" /&gt;\n</code></pre> <p>on props </p> <pre><code>&lt;Avatar variant=\"square\"&gt;A&lt;/Avatar&gt;\n&lt;Avatar variant=\"rounded\"&gt;B&lt;/Avatar&gt;\n</code></pre> <p>What Is a Badge?</p> <p>A Badge is a small dot, number, or symbol that appears next to another component (like an icon or avatar) to show a notification, count, or status.</p> Real Use Case MUI Badge Equivalent WhatsApp unread chats A red dot with number on avatar Gmail new messages Count badge on inbox icon Status indicator Green dot on profile avatar <p>Key Props in Badge</p> Prop Type What It Does <code>badgeContent</code> node What to show inside the badge (number, letter) <code>color</code> string Badge color: <code>'primary'</code>, <code>'error'</code>, <code>'success'</code> <code>overlap</code> string <code>'rectangular'</code> or <code>'circular'</code> for positioning <code>anchorOrigin</code> object Controls vertical/horizontal position <code>variant</code> string <code>'dot'</code> or <code>'standard'</code> <code>sx</code> object Custom styling <p>Example:</p> <pre><code>import React from 'react';\nimport { Avatar, Badge, Stack, Typography } from '@mui/material';\n\nexport default function AvatarBadgeDemo() {\n  return (\n    &lt;Stack spacing={3} alignItems=\"center\"&gt;\n      &lt;Typography variant=\"h6\"&gt;Avatar with Image&lt;/Typography&gt;\n      &lt;Avatar src=\"https://i.pravatar.cc/100\" /&gt;\n\n      &lt;Typography variant=\"h6\"&gt;Avatar with Initials&lt;/Typography&gt;\n      &lt;Avatar sx={{ bgcolor: 'primary.main' }}&gt;JK&lt;/Avatar&gt;\n\n      &lt;Typography variant=\"h6\"&gt;Avatar with Notification Badge&lt;/Typography&gt;\n      &lt;Badge badgeContent={3} color=\"error\"&gt;\n        &lt;Avatar src=\"https://i.pravatar.cc/100\" /&gt;\n      &lt;/Badge&gt;\n    &lt;/Stack&gt;\n  );\n}\n</code></pre>"},{"location":"#listlistitem-and-divider","title":"List,ListItem And Divider","text":"<p>List</p> <p>A List in Material UI is a vertical container that holds multiple items \u2014 like a contact list, menu, chat messages, notifications, etc.</p> <p>It works like a traditional HTML <code>&lt;ul&gt;</code> (unordered list), but styled and controlled by MUI.</p> <p>what is a ListItem</p> <p>A ListItem is a single item inside a List \u2014 like one contact, one message, one task.</p> <p>Key Props of Listem</p> Prop Type Description <code>button</code> boolean Makes the item behave like a button (clickable) <code>selected</code> boolean Highlights the item as selected <code>disabled</code> boolean Disables interaction <code>sx</code> object Style using MUI system <code>alignItems</code> string <code>\"flex-start\"</code> if content is top-aligned vertically <code>divider</code> boolean Adds a thin divider line below this item (shortcut) <p>What is a Divider</p> <p>A Divider is a horizontal line used to visually separate content \u2014 usually between list items, cards, or sections of a page.</p> <p>Key Props of Divider</p> Prop Type Description <code>variant</code> <code>'fullWidth'</code>, <code>'inset'</code>, <code>'middle'</code> Controls indentation and line position <code>orientation</code> <code>'horizontal'</code>, <code>'vertical'</code> Direction of the line <code>sx</code> object Custom style (width, color, margin, etc.) <code>light</code> boolean Makes the line thinner or lighter color <code>textAlign</code> <code>'left'</code>, <code>'right'</code>, <code>'center'</code> Aligns optional text on the divider <p>What is ListItemList</p> <p>ListItemText is a special helper component from Material UI that is used inside a ListItem to display one or two lines of text \u2014 usually a title and subtext (like name + email).</p> <p>Key Props</p> Prop Type What It Does <code>primary</code> string or node Main content (first line, bold by default) <code>secondary</code> string or node Subtext (second line, gray by default) <code>sx</code> object Custom styling <code>primaryTypographyProps</code> object Props passed to the Typography of <code>primary</code> <code>secondaryTypographyProps</code> object Props for <code>secondary</code> Typography <p>Example:</p> <pre><code>import React from 'react';\nimport { List, ListItem, ListItemText, Divider, Paper, Typography } from '@mui/material';\n\nexport default function ContactList() {\n  const contacts = [\n    { name: 'John Kim', email: 'john@example.com' },\n    { name: 'Sarah Lee', email: 'sarah@example.com' },\n    { name: 'Mark Smith', email: 'mark@example.com' },\n  ];\n\n  return (\n    &lt;Paper elevation={3} sx={{ maxWidth: 360, margin: 'auto', mt: 4 }}&gt;\n      &lt;Typography variant=\"h6\" sx={{ p: 2, pb: 0 }}&gt;\n        Contact List\n      &lt;/Typography&gt;\n      &lt;List&gt;\n        {contacts.map((person, index) =&gt; (\n          &lt;React.Fragment key={person.email}&gt;\n            &lt;ListItem button sx={{ \"&amp;:hover\": { backgroundColor: \"#f0f0f0\" } }}&gt;\n              &lt;ListItemText\n                primary={person.name}\n                secondary={person.email}\n              /&gt;\n            &lt;/ListItem&gt;\n            {index &lt; contacts.length - 1 &amp;&amp; &lt;Divider /&gt;}\n          &lt;/React.Fragment&gt;\n        ))}\n      &lt;/List&gt;\n    &lt;/Paper&gt;\n  );\n}\n</code></pre>"},{"location":"#tables-in-material-ui","title":"Tables in Material UI","text":"<p>what is a table</p> <p>A Table in MUI is a layout component for showing rows and columns of data, like you see in Excel or a data report.</p> <p>The Table Components Family</p> Component Purpose <code>Table</code> The overall table container <code>TableHead</code> The header (top row with column names) <code>TableRow</code> A row \u2014 works in both header and body <code>TableCell</code> A cell \u2014 each box inside a row <code>TableBody</code> The section containing actual data rows <code>TableContainer</code> A wrapper (scrollable, with Paper if needed) <code>TableFooter</code> Optional footer section <code>Paper</code> Gives a card-like background to the table <p>Example</p> <pre><code>import React from 'react';\nimport {\n  Table, TableBody, TableCell, TableContainer,\n  TableHead, TableRow, Paper, Typography\n} from '@mui/material';\n\nconst users = [\n  { name: 'John Kim', email: 'john@example.com', role: 'Admin' },\n  { name: 'Sarah Lee', email: 'sarah@example.com', role: 'Editor' },\n  { name: 'Mike Smith', email: 'mike@example.com', role: 'Viewer' },\n];\n\nexport default function SimpleTable() {\n  return (\n    &lt;TableContainer component={Paper} sx={{ maxWidth: 600, margin: 'auto', mt: 5 }}&gt;\n      &lt;Typography variant=\"h6\" sx={{ p: 2 }}&gt;\n        User List\n      &lt;/Typography&gt;\n      &lt;Table&gt;\n        &lt;TableHead&gt;\n          &lt;TableRow&gt;\n            &lt;TableCell&gt;Name&lt;/TableCell&gt;\n            &lt;TableCell&gt;Email&lt;/TableCell&gt;\n            &lt;TableCell&gt;Role&lt;/TableCell&gt;\n          &lt;/TableRow&gt;\n        &lt;/TableHead&gt;\n\n        &lt;TableBody&gt;\n          {users.map((user) =&gt; (\n            &lt;TableRow key={user.email}&gt;\n              &lt;TableCell&gt;{user.name}&lt;/TableCell&gt;\n              &lt;TableCell&gt;{user.email}&lt;/TableCell&gt;\n              &lt;TableCell&gt;{user.role}&lt;/TableCell&gt;\n            &lt;/TableRow&gt;\n          ))}\n        &lt;/TableBody&gt;\n      &lt;/Table&gt;\n    &lt;/TableContainer&gt;\n  );\n}\n</code></pre>"},{"location":"#accordion-and-expansion-panels-in-material-ui","title":"Accordion and Expansion Panels in Material UI","text":"<p>An Accordion is a UI component that lets you show and hide content by expanding and collapsing sections \u2014 like an FAQ list or toggle menu.</p> <p>Accodion structure</p> Part What It Does <code>Accordion</code> The main wrapper for each toggle item <code>AccordionSummary</code> The clickable header \u2014 what you click to expand <code>AccordionDetails</code> The hidden content that is revealed on expand <p>Prop</p> Prop Type Description <code>expanded</code> boolean Manually controls if open or closed <code>defaultExpanded</code> boolean Makes it open by default <code>onChange</code> function Triggered when open/close changes <code>sx</code> object For custom styling <p>AccordionSummary</p> Prop Type Description <code>expandIcon</code> element Icon to show on the right (e.g. +, &gt;) <code>aria-controls</code>, <code>id</code> string Accessibility support <p>AccordionDetails</p> <p>This doesn\u2019t take any special props \u2014 just put your content here like text, lists, forms, etc.</p> <p>Example</p> <pre><code>import React from 'react';\nimport {\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  Typography,\n} from '@mui/material';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\n\nexport default function FAQAccordion() {\n  return (\n    &lt;div&gt;\n      &lt;Accordion&gt;\n        &lt;AccordionSummary\n          expandIcon={&lt;ExpandMoreIcon /&gt;}\n          aria-controls=\"panel1-content\"\n          id=\"panel1-header\"\n        &gt;\n          &lt;Typography fontWeight=\"bold\"&gt;What is your return policy?&lt;/Typography&gt;\n        &lt;/AccordionSummary&gt;\n        &lt;AccordionDetails&gt;\n          &lt;Typography&gt;\n            We offer a 30-day return policy for unused items with original packaging.\n          &lt;/Typography&gt;\n        &lt;/AccordionDetails&gt;\n      &lt;/Accordion&gt;\n\n      &lt;Accordion&gt;\n        &lt;AccordionSummary\n          expandIcon={&lt;ExpandMoreIcon /&gt;}\n          aria-controls=\"panel2-content\"\n          id=\"panel2-header\"\n        &gt;\n          &lt;Typography fontWeight=\"bold\"&gt;How do I track my order?&lt;/Typography&gt;\n        &lt;/AccordionSummary&gt;\n        &lt;AccordionDetails&gt;\n          &lt;Typography&gt;\n            You will receive a tracking number via email once your order is shipped.\n          &lt;/Typography&gt;\n        &lt;/AccordionDetails&gt;\n      &lt;/Accordion&gt;\n\n      &lt;Accordion&gt;\n        &lt;AccordionSummary\n          expandIcon={&lt;ExpandMoreIcon /&gt;}\n          aria-controls=\"panel3-content\"\n          id=\"panel3-header\"\n        &gt;\n          &lt;Typography fontWeight=\"bold\"&gt;Can I cancel my order?&lt;/Typography&gt;\n        &lt;/AccordionSummary&gt;\n        &lt;AccordionDetails&gt;\n          &lt;Typography&gt;\n            Yes, you can cancel within 24 hours of placing the order.\n          &lt;/Typography&gt;\n        &lt;/AccordionDetails&gt;\n      &lt;/Accordion&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"#chip-and-chipgroup-in-material-ui","title":"Chip and ChipGroup in Material UI","text":"<p>A Chip is a compact, pill-like UI component used to represent a small piece of information such as a tag, category, user, or action</p> <p>Key Props</p> Prop Type What It Does <code>label</code> string/node The visible text inside the chip <code>avatar</code> node Adds a small avatar/icon on the left <code>icon</code> node Adds an icon before the label <code>color</code> string MUI colors like <code>\"primary\"</code>, <code>\"success\"</code> <code>variant</code> string <code>\"filled\"</code> (default) or <code>\"outlined\"</code> <code>onClick</code> function Makes the chip clickable <code>onDelete</code> function Adds an <code>X</code> icon to remove the chip <code>disabled</code> boolean Disables interaction <code>sx</code> object For custom styles"},{"location":"#customization-and-theming","title":"Customization and Theming","text":"<p>What is theme</p> <p>A theme in Material UI is like the design language of your app \u2014 it defines how everything looks and feels: colors, typography, spacing, shadows, breakpoints, etc.</p> <p>Default theme structure</p> <pre><code>{\n  palette: {                \n    primary, secondary, error, warning, success, info, background, text\n  },\n  typography: {             \n    fontFamily, fontSize, h1, h2, h3, ..., body1, button\n  },\n  spacing: (factor) =&gt; number,\n  breakpoints: {            \n    values: { xs, sm, md, lg, xl }\n  },\n  shape: {\n    borderRadius            \n  },\n  shadows: []               \n}\n</code></pre> <p>How to access Theme</p> <p>Option 1:  Using the useTheme() hook</p> <pre><code>import { useTheme } from '@mui/material/styles';\n\nconst theme = useTheme();\nconsole.log(theme.palette.primary.main); \n</code></pre> <p>Option 2:Access theme from the sx prop</p> <p>```   theme.palette.primary.main,     padding: (theme) =&gt; theme.spacing(2),   }} <p>Themed Box </p> <pre><code>### Creating a Custom Theme\n\nA custom theme lets you override Material UI\u2019s default styles \u2014 like changing your app\u2019s colors, fonts, spacing, borders, and more.\n\n*Tools:*\n\n- createTheme()-Material UI gives you this helper function:\n\n</code></pre> <p>import { createTheme } from '@mui/material/styles';</p> <pre><code>- ThemeProvider-To make your theme work across your app, you wrap it with:\n\n</code></pre> <p>import { ThemeProvider } from '@mui/material/styles';</p> <pre><code>*Example:Custom Theme*\n\n</code></pre> <p>import React from 'react'; import {   createTheme,   ThemeProvider,   CssBaseline,   Typography,   Button,   Box } from '@mui/material';</p> <p>const customTheme = createTheme({   palette: {     primary: {       main: \"#00695f\",       contrastText: \"#ffffff\",     },     secondary: {       main: \"#ff6f00\",     },     background: {       default: \"#f5f5f5\",       paper: \"#ffffff\"     },     text: {       primary: \"#212121\"     }   },   typography: {     fontFamily: \"'Poppins', sans-serif\",     h4: {       fontWeight: 700,       fontSize: \"2rem\"     },     body1: {       fontSize: \"1rem\"     }   },   spacing: 4 });</p> <p>export default function CustomThemeExample() {   return (                 Custom Themed App                     This text uses your custom theme\u2019s typography and spacing.                     Themed Button             ); }</p> <pre><code>\n**Styled API**\n\nThe styled() API lets you create your own custom components with styles applied, just like Tailwind or styled-components \u2014 but with full MUI theme support.\n\n*Example:*\n\n</code></pre> <p>import { styled } from '@mui/material/styles'; import Button from '@mui/material/Button';</p> <p>const MyButton = styled(Button)(({ theme }) =&gt; ({   backgroundColor: theme.palette.secondary.main,   color: theme.palette.common.white,   padding: theme.spacing(2),   borderRadius: theme.shape.borderRadius,   '&amp;:hover': {     backgroundColor: theme.palette.secondary.dark,   } }));</p> <p>Styled Button</p> <pre><code>\n### Global Styles and CSS Baseline\n\n*Global Styles*\n\nGlobal styles are styles that affect your entire application, not just one component.\nThey apply to everything \u2014 like body background, font, margin, etc.\n\n*CssBaseline*\n\nCssBaseline is a built-in Material UI component that resets default browser styles and applies theme-aware defaults globally.\n\n</code></pre> <p>import { CssBaseline } from '@mui/material';</p> <p> </p> <pre><code>\n#   Responsive Design and Media Queries\n\nResponsive Design means making your app or website adapt to different screen sizes like phones, tablets, and desktops.\n\n### Breakpoints and Media Queries in MUI\n\nBreakpoints are specific screen widths where your design should change to look better.\n\n**MUI Default Breakpoints**\n\n| Breakpoint  | Key  | Screen Width    |\n| ----------- | ---- | --------------- |\n| Extra-small | `xs` | `0px` and up    |\n| Small       | `sm` | `600px` and up  |\n| Medium      | `md` | `900px` and up  |\n| Large       | `lg` | `1200px` and up |\n| Extra-large | `xl` | `1536px` and up |\n\n*How Do Media Queries Work in MUI?*\n\nMUI's Special sx Prop + theme.breakpoints\nMUI gives you built-in helpers for media queries, so you don\u2019t have to write raw CSS.\n\n</code></pre> <p>&lt;Box   sx={{     p: {       xs: 1,   // padding 8px on phones       sm: 2,   // padding 16px on tablets       md: 4    // padding 32px on desktops     }   }}</p> <p>Responsive Box </p> <pre><code>\n## useMediaQuery in Material UI\n\nuseMediaQuery is a React hook provided by Material UI that lets you check the screen size directly in JavaScript\n\nAll Types of Media Queries\n\n| Query Type                  | Example                              | Meaning               |\n| --------------------------- | ------------------------------------ | --------------------- |\n| `down(\"sm\")`                | `&lt; 600px`                            | Small screen (mobile) |\n| `up(\"md\")`                  | `&gt;= 900px`                           | Medium screen and up  |\n| `between(\"sm\", \"lg\")`       | `600px - 1200px`                     | Tablet-sized          |\n| `(min-width:600px)`         | CSS-style query                      | Works without `theme` |\n| `\"(orientation: portrait)\"` | Matches phone/tablet vertical layout | Orientation detection |\n\n*Basic Example:*\n\n</code></pre> <p>import React from 'react'; import { useMediaQuery, Typography } from '@mui/material'; import { useTheme } from '@mui/material/styles';</p> <p>export default function MediaQueryExample() {   const theme = useTheme(); // access your theme breakpoints   const isSmallScreen = useMediaQuery(theme.breakpoints.down('sm'));</p> <p>return (            {isSmallScreen ? 'Small screen (mobile)' : 'Large screen (tablet or desktop)'}        ); } ```</p>"}]}